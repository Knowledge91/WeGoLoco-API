//
// Copyright 2016 Amazon.com, Inc. or its affiliates (Amazon). All Rights Reserved.
//
// Code generated by AWS Mobile Hub. Amazon gives unlimited permission to
// copy, distribute and modify it.
//

'use strict';
var AWS = require("aws-sdk");
var docClient = new AWS.DynamoDB.DocumentClient();
var usersTable = "tinpons-mobilehub-1827971537-Users";
var tinponsTable = "tinpons-mobilehub-1827971537-Tinpons";
var swipedTinponsTable = "tinpons-mobilehub-1827971537-SwipedTinpons";

function isEmpty(obj) {
    for(var prop in obj) {
        if(obj.hasOwnProperty(prop))
            return false;
    }

    return JSON.stringify(obj) === JSON.stringify({});
}

function respond(context, statusCode, body) {
  let response = {
      statusCode: statusCode,
      headers: {
          "x-custom-header" : "custom header value"
      },
      body: body
  };

  context.succeed(response);
}

exports.handler = function(event, context, callback) {
    var responseCode = 200;
    var requestBody, pathParams, queryStringParams, headerParams, stage,
    stageVariables, cognitoIdentityId, httpMethod, sourceIp, userAgent,
    requestId, resourcePath;
    console.log("request: " + JSON.stringify(event));

    // Request Body
    requestBody = event.body;

    if (requestBody !== undefined && requestBody !== null) {

        // Set 'test-status' field in the request to test sending a specific response status code (e.g., 503)
        responseCode = JSON.parse(requestBody)['test-status'];
    }

    // Path Parameters
    pathParams = event.path;

    // Query String Parameters
    queryStringParams = event.queryStringParameters;

    // Header Parameters
    headerParams = event.headers;

    if (event.requestContext !== null && event.requestContext !== undefined) {

        var requestContext = event.requestContext;

        // API Gateway Stage
        stage = requestContext.stage;

        // Unique Request ID
        requestId = requestContext.requestId;

        // Resource Path
        resourcePath = requestContext.resourcePath;

        var identity = requestContext.identity;

        // Amazon Cognito User Identity
        cognitoIdentityId = identity.cognitoIdentityId;

        // Source IP
        sourceIp = identity.sourceIp;

        // User-Agent
        userAgent = identity.userAgent;
    }

    // API Gateway Stage Variables
    stageVariables = event.stageVariables;

    // HTTP Method (e.g., POST, GET, HEAD)
    httpMethod = event.httpMethod;

    // TODO: Put your application logic here...
    console.log("pathParams: ",pathParams);
    var result, params;
    switch(pathParams) {
      case "/tinpons" :
        switch (httpMethod) {
          case: "POST":
            console.log("tinpons POST");
          break;

          default:
            respond(context, 403, httpMethod+" is not an allowed HTTP method.");
        };
        break;
      case "/tinpons/notSwiped" :
        switch (httpMethod) {
          case "GET":
            // GET method is for NOT SWIPED TINPONS of user account

            // var userId = cognitoIdentityId;
            //var userId = "eu-west-1:7f84077c-2df1-4835-b80e-bd29534611ac";
            let userId = cognitoIdentityId
            let userParams = {
                TableName: usersTable,
                Key:{
                    "userId": userId,
                }
            };
            let swipedTinponsParams = {
                TableName: swipedTinponsTable,
                KeyConditionExpression: 'userId = :userId',
                ExpressionAttributeValues: { ":userId": userId }
            }

            var userPromise = docClient.get(userParams, function(err, data){}).promise();
            var swipedTinponsPromise = docClient.query(swipedTinponsParams, function(err, data){}).promise();

            Promise.all([userPromise, swipedTinponsPromise]).then(function(data) {
              let user = data[0].Item; // Strip JSON Root { "Item": ... }
              let swipedTinpons = data[1].Items;
              let tinponCategories = user.tinponCategories.values; // array of user categories

              console.log("GET user succeeded:", JSON.stringify(user, null, 2));
              console.log("QUERY swipedTinpons succeeded:", JSON.stringify(swipedTinpons, null, 2));


              // include CATEGORY filterExpression parameter
              var filterExpression = '(category = :category';
              var expressionAttributeValues = { ':category' : tinponCategories[0] };
              for (var i = 1; i < tinponCategories.length; i++) {
                filterExpression = filterExpression.concat(' OR category = :category'+i);
                expressionAttributeValues[":category"+i] = tinponCategories[i];
              }
              filterExpression = filterExpression.concat(")");

              // exclude SWIPED TINPONS filterExpression
              if (swipedTinpons.length > 0) {
                filterExpression = filterExpression.concat(" AND tinponId <> :swipedTinpon");
                expressionAttributeValues[":swipedTinpon"] = swipedTinpons[0].tinponId
              }
              for (var i = 1; i < swipedTinpons.length; i++) {
                filterExpression = filterExpression.concat(' AND tinponId <> :swipedTinpon'+i);
                expressionAttributeValues[":swipedTinpon"+i] = swipedTinpons[i].tinponId
              }
              console.log("filterExpression: " + filterExpression);
              console.log("expressionAttributeValues: ", expressionAttributeValues);

              params = {
                  TableName: tinponsTable,
                  FilterExpression : filterExpression,
                  ExpressionAttributeValues : expressionAttributeValues,
                  Limit : 50,
              };

              return docClient.scan(params, function(err, data){}).promise();
            }).then(function(data){
              respond(context, 200, JSON.stringify(data.Items));
            }).catch(function(error) {
              console.error("Unable to GET user. Error JSON:", error);
            });

            // params = {
            //     TableName: tinponsTable,
            //     FilterExpression : 'category = :userCategorie',
            //     ExpressionAttributeValues : {':userCategorie' : 'ðŸ‘–'},
            //     Limit : 50,
            // };
            // docClient.scan(params, function(err, data) {
            //     if (err) {
            //         console.error("Unable to GET user. Error JSON:", JSON.stringify(err, null, 2));
            //     } else {
            //         console.log("GET Tinpons succeeded:", JSON.stringify(data, null, 2));
            //         // Strip JSON Root { "Item": ... }
            //         respond(context, 200, JSON.stringify(data));
            //     }
            // });
            break;
          default:
            respond(context, 403, httpMethod+" is not an allowed HTTP method.");
          }
        break;
        //tinpons/notSwiped ///////////////////////////////////////////////////////////////////////
        case "/tinpons/favourite":
          switch (httpMethod) {
            case "GET":
              //var userId = "eu-west-1:7f84077c-2df1-4835-b80e-bd29534611ac";
              let userId = cognitoIdentityId
              let swipedFavouriteTinponsParams = {
                  TableName: swipedTinponsTable,
                  IndexName: "userId-favourite-index",
                  KeyConditionExpression: 'userId = :userId AND favourite = :favourite',
                  ExpressionAttributeValues: { ":userId" : userId, ":favourite" : 1 }
              }

              var swipedFavouriteTinponsPromise = docClient.query(swipedFavouriteTinponsParams, function(err, data){}).promise();

              swipedFavouriteTinponsPromise.then(function(data) {
                console.log("favourite swipedTinpons loaded: ", JSON.stringify(data));
                let swipedFavouriteTinpons = data.Items;

                var favouriteTinponsParams = {
                  RequestItems: {
                    [tinponsTable] : {
                      Keys: []
                    }
                  }
                };

                for (var i = 0; i < swipedFavouriteTinpons.length; i++) {
                    favouriteTinponsParams.RequestItems[tinponsTable].Keys.push({ "tinponId" : swipedFavouriteTinpons[i].tinponId });
                }
                console.log("favourties test ", data.Items[0].tinponId);


                return docClient.batchGet(favouriteTinponsParams, function(error, data) {}).promise();
              }).then(function(data) {
                console.log("favourite Tinpons loaded: ", JSON.stringify(data));

                respond(context, 200, JSON.stringify(data.Responses[tinponsTable]));
              }).catch(function(error) {
                console.error("Unable to GET favourite Tinpons. Error JSON:", error);
              });
              break;
            default:
              respond(context, 403, httpMethod+" is not an allowed HTTP method.")
            }

    }



    // For demonstration purposes, we'll just echo these values back to the client
    // var responseBody = {
    //     requestBody : requestBody,
    //     pathParams : pathParams,
    //     queryStringParams : queryStringParams,
    //     headerParams : headerParams,
    //     stage : stage,
    //     stageVariables : stageVariables,
    //     cognitoIdentityId : cognitoIdentityId,
    //     httpMethod : httpMethod,
    //     sourceIp : sourceIp,
    //     userAgent : userAgent,
    //     requestId : requestId,
    //     resourcePath : resourcePath
    // };
    //
    // var response = {
    //     statusCode: responseCode,
    //     headers: {
    //         "x-custom-header" : "custom header value"
    //     },
    //     body: JSON.stringify(responseBody)
    // };
    // console.log("response: " + JSON.stringify(response))
    // context.succeed(response);
};
